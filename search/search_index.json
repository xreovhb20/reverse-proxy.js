{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Reverse-Proxy.js Personal reverse proxy server Let's suppose you were running multiple HTTP application servers, but you only wanted to expose one machine to the Internet. You could setup Reverse-Proxy.js on that one machine and then reverse-proxy the incoming HTTP requests to locally running services which were not exposed to the outside network. Info Reverse-Proxy.js is based on the Nodejitsu HTTP Proxy project. If you need advanced features not provided by this application, you should consider using the http-proxy package directly. Features Configuration based on simple JSON or YAML files. Routing tables based on hostnames . Multiple instances : allows to listen on several ports, with each one having its own target(s). Supports HTTPS protocol . Supports WebSockets requests. Supports custom HTTP headers . Quick start Install the latest version of Reverse-Proxy.js with npm : npm install --global @cedx/reverse-proxy For detailed instructions, see the installation guide .","title":"Overview"},{"location":"#reverse-proxyjs","text":"","title":"Reverse-Proxy.js"},{"location":"#personal-reverse-proxy-server","text":"Let's suppose you were running multiple HTTP application servers, but you only wanted to expose one machine to the Internet. You could setup Reverse-Proxy.js on that one machine and then reverse-proxy the incoming HTTP requests to locally running services which were not exposed to the outside network. Info Reverse-Proxy.js is based on the Nodejitsu HTTP Proxy project. If you need advanced features not provided by this application, you should consider using the http-proxy package directly.","title":"Personal reverse proxy server"},{"location":"#features","text":"Configuration based on simple JSON or YAML files. Routing tables based on hostnames . Multiple instances : allows to listen on several ports, with each one having its own target(s). Supports HTTPS protocol . Supports WebSockets requests. Supports custom HTTP headers .","title":"Features"},{"location":"#quick-start","text":"Install the latest version of Reverse-Proxy.js with npm : npm install --global @cedx/reverse-proxy For detailed instructions, see the installation guide .","title":"Quick start"},{"location":"installation/","text":"Installation Requirements Before installing Reverse-Proxy.js , you need to make sure you have Node.js and npm , the Node.js package manager, up and running. Warning Reverse-Proxy.js requires Node.js = 10.15.0 . You can verify if you're already good to go with the following commands: node --version # v11.9.0 npm --version # 6.5.0 Info If you plan to play with the package sources, you will also need Gulp and Material for MkDocs . Installing with npm package manager From a command prompt, run: npm install --global @cedx/reverse-proxy Tip Consider adding the npm install --global executables directory to your system path. Now you should be able to use the reverse-proxy executable: reverse-proxy --version # 10.0.0 Info This library is packaged as CommonJS modules ( .js files) and ECMAScript modules ( .mjs files).","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#requirements","text":"Before installing Reverse-Proxy.js , you need to make sure you have Node.js and npm , the Node.js package manager, up and running. Warning Reverse-Proxy.js requires Node.js = 10.15.0 . You can verify if you're already good to go with the following commands: node --version # v11.9.0 npm --version # 6.5.0 Info If you plan to play with the package sources, you will also need Gulp and Material for MkDocs .","title":"Requirements"},{"location":"installation/#installing-with-npm-package-manager","text":"From a command prompt, run: npm install --global @cedx/reverse-proxy Tip Consider adding the npm install --global executables directory to your system path. Now you should be able to use the reverse-proxy executable: reverse-proxy --version # 10.0.0 Info This library is packaged as CommonJS modules ( .js files) and ECMAScript modules ( .mjs files).","title":"Installing with npm package manager"},{"location":"about/changelog/","text":"Changelog Version 10.0.0 Breaking change: ported the source code to TypeScript . Breaking change: raised the required Node.js version. Breaking change: dropped the TODO --user CLI argument. Breaking change: the Server class and CLI now uses port 8080 as default. Added the Application.instance property. Added a user guide based on MkDocs . Added support for multithreading: implements the feature request #7 . Fixed the issue #6 : wrong executable name in the documentation. Ported the unit tests to classes with experimental decorators. Updated the build system to Gulp version 4. Updated the package dependencies. Using the fs promises API. Version 9.0.0 Breaking change: raised the required Node.js version. Breaking change: renamed the Application#env property to environment . Updated the package dependencies. Version 8.0.0 Breaking change: using camel case instead of studly caps for static properties. Updated the package dependencies. Version 7.1.0 Improved the error handling in Server#listen() method. Updated the package dependencies. Version 7.0.0 Breaking change: converted the Observable -based API to an async/await -based one. Breaking change: converted the Subject event API to the EventEmitter one. Added the #[Symbol.toStringTag] property to all classes. Changed licensing for the MIT License . Version 6.1.0 Removed the dependency on Babel compiler. Updated the package dependencies. Version 6.0.1 Fixed a packaging issue. Version 6.0.0 Breaking change: raised the required Node.js version. Breaking change: restored the Observable APIs. Added new unit tests. Updated the package dependencies. Version 5.0.1 Fixed a code generation bug. Updated the package dependencies. Version 5.0.0 Breaking change: renamed the Application#loadConfig method to init . Breaking change: renamed the Application#setUser method to _setUser . Breaking change: renamed the Application#startServers method to _startServers . Added the Application#servers property. Added new unit tests. Version 4.0.1 Fixed the issue #5 : regression in the Application#setUser method. Version 4.0.0 Breaking change: removed the Application#log method. The response object is also provided in request events. The routing table of a Server is now exposed as the routes property. Using the Morgan module to handle the logging. Version 3.1.0 Added support for the Node Security Platform reports. Updated the package dependencies. Version 3.0.0 Breaking change: dropped the dependency on Observables . Breaking change: renamed the listen event to listening . Breaking change: the Server class is now an EventEmitter . Version 2.2.0 Added support of HTTP headers: feature request from issue #4 . Fixed a bug in the reading of the SSL certificates. Version 2.1.0 Using asynchronous file access in Application#_parseConfig method. Updated the package dependencies. Version 2.0.0 Breaking change: raised the required Node.js version. Breaking change: removed the global.app property. Breaking change: using ES2017 features, like async/await functions. Improved the build system. Ported the unit test assertions from TDD to BDD . Removed the dependency on the forever module. Removed the dependency on the gulp-load-plugins module. Updated the package dependencies. Version 1.2.0 Replaced the Codacy code coverage service by the Coveralls one. Updated the package dependencies. Version 1.1.0 Added the Server#listening property. Version 1.0.0 Breaking change: changed the HTTP status code used when an error occurred. Breaking change: ported the CommonJS modules to ES2015 format. Breaking change: ported the Promise -based APIs to Observables . Breaking change: raised the required Node.js version. Breaking change: replaced the test classes by plain tests. Breaking change: the Server class is not anymore an EventEmitter . Added a build task for fixing the coding standards issues. Added the onClose , onError , onListen and onRequest event streams to the Server class. Replaced JSDoc documentation generator by ESDoc . Replaced JSHint linter by ESLint . Updated the package dependencies. Version 0.7.0 Breaking change: renamed the Server.DEFAULT_HOST property to DEFAULT_ADDRESS . Breaking change: renamed the Server#host property to address . Breaking change: renamed the -H, --host command line option to -a, --address . Upgraded the package dependencies. Version 0.6.0 Breaking change: using more ES2015 features, like default parameters and destructuring assignment. Breaking change: raised the required Node.js version. Turned the package into a scoped one . Added the DEFAULT_HOST and DEFAULT_PORT constants to the Server class. Replaced SonarQube code analyzer by Codacy service. Version 0.5.4 Fixed some bugs. Upgraded the package dependencies. Version 0.5.3 Improved the way the server address is reported. The application instance is now exposed as global.app property. Version 0.5.2 Restored support for configuration files in JSON format. Upgraded the package dependencies. Version 0.5.1 The port parameter of the Server#listen method is now optional. Added unit tests. Added support for code coverage. Added support for Travis CI continuous integration. Version 0.5.0 Breaking change: using ES2015 features, like arrow functions, block-scoped binding constructs, classes and template strings. Breaking change: raised the required Node.js version. Breaking change: changed the whole API of Application class. Breaking change: changed the format of Server#request event. Breaking change: changed the format of configuration files to YAML . Added support for SonarQube code analyzer. Changed the documentation system for JSDoc . Changed licensing for the Apache License Version 2.0 . Version 0.4.1 Upgraded the package dependencies. Version 0.4.0 Breaking change: raised the required Node.js version. Removed the dependency on promise module. Upgraded the package dependencies. Version 0.3.0 Breaking change: ported the callback-based API to Promises . Using Gulp as build system. Fixed the issue #1 : using a Unix system for publishing the package on npm . Upgraded the package dependencies. Version 0.2.1 Added Application class, used in CLI script. Added sample configuration files. Updated the documentation. Version 0.2.0 The Server class and CLI now uses port 3000 as default. Added Server#listening event. Improved the event handling. Updated the package dependencies. Breaking change: removed Server#upgrade event. Using DocGen.js to generate the API reference. Version 0.1.0 Initial release.","title":"Changelog"},{"location":"about/changelog/#changelog","text":"","title":"Changelog"},{"location":"about/changelog/#version-1000","text":"Breaking change: ported the source code to TypeScript . Breaking change: raised the required Node.js version. Breaking change: dropped the TODO --user CLI argument. Breaking change: the Server class and CLI now uses port 8080 as default. Added the Application.instance property. Added a user guide based on MkDocs . Added support for multithreading: implements the feature request #7 . Fixed the issue #6 : wrong executable name in the documentation. Ported the unit tests to classes with experimental decorators. Updated the build system to Gulp version 4. Updated the package dependencies. Using the fs promises API.","title":"Version 10.0.0"},{"location":"about/changelog/#version-900","text":"Breaking change: raised the required Node.js version. Breaking change: renamed the Application#env property to environment . Updated the package dependencies.","title":"Version 9.0.0"},{"location":"about/changelog/#version-800","text":"Breaking change: using camel case instead of studly caps for static properties. Updated the package dependencies.","title":"Version 8.0.0"},{"location":"about/changelog/#version-710","text":"Improved the error handling in Server#listen() method. Updated the package dependencies.","title":"Version 7.1.0"},{"location":"about/changelog/#version-700","text":"Breaking change: converted the Observable -based API to an async/await -based one. Breaking change: converted the Subject event API to the EventEmitter one. Added the #[Symbol.toStringTag] property to all classes. Changed licensing for the MIT License .","title":"Version 7.0.0"},{"location":"about/changelog/#version-610","text":"Removed the dependency on Babel compiler. Updated the package dependencies.","title":"Version 6.1.0"},{"location":"about/changelog/#version-601","text":"Fixed a packaging issue.","title":"Version 6.0.1"},{"location":"about/changelog/#version-600","text":"Breaking change: raised the required Node.js version. Breaking change: restored the Observable APIs. Added new unit tests. Updated the package dependencies.","title":"Version 6.0.0"},{"location":"about/changelog/#version-501","text":"Fixed a code generation bug. Updated the package dependencies.","title":"Version 5.0.1"},{"location":"about/changelog/#version-500","text":"Breaking change: renamed the Application#loadConfig method to init . Breaking change: renamed the Application#setUser method to _setUser . Breaking change: renamed the Application#startServers method to _startServers . Added the Application#servers property. Added new unit tests.","title":"Version 5.0.0"},{"location":"about/changelog/#version-401","text":"Fixed the issue #5 : regression in the Application#setUser method.","title":"Version 4.0.1"},{"location":"about/changelog/#version-400","text":"Breaking change: removed the Application#log method. The response object is also provided in request events. The routing table of a Server is now exposed as the routes property. Using the Morgan module to handle the logging.","title":"Version 4.0.0"},{"location":"about/changelog/#version-310","text":"Added support for the Node Security Platform reports. Updated the package dependencies.","title":"Version 3.1.0"},{"location":"about/changelog/#version-300","text":"Breaking change: dropped the dependency on Observables . Breaking change: renamed the listen event to listening . Breaking change: the Server class is now an EventEmitter .","title":"Version 3.0.0"},{"location":"about/changelog/#version-220","text":"Added support of HTTP headers: feature request from issue #4 . Fixed a bug in the reading of the SSL certificates.","title":"Version 2.2.0"},{"location":"about/changelog/#version-210","text":"Using asynchronous file access in Application#_parseConfig method. Updated the package dependencies.","title":"Version 2.1.0"},{"location":"about/changelog/#version-200","text":"Breaking change: raised the required Node.js version. Breaking change: removed the global.app property. Breaking change: using ES2017 features, like async/await functions. Improved the build system. Ported the unit test assertions from TDD to BDD . Removed the dependency on the forever module. Removed the dependency on the gulp-load-plugins module. Updated the package dependencies.","title":"Version 2.0.0"},{"location":"about/changelog/#version-120","text":"Replaced the Codacy code coverage service by the Coveralls one. Updated the package dependencies.","title":"Version 1.2.0"},{"location":"about/changelog/#version-110","text":"Added the Server#listening property.","title":"Version 1.1.0"},{"location":"about/changelog/#version-100","text":"Breaking change: changed the HTTP status code used when an error occurred. Breaking change: ported the CommonJS modules to ES2015 format. Breaking change: ported the Promise -based APIs to Observables . Breaking change: raised the required Node.js version. Breaking change: replaced the test classes by plain tests. Breaking change: the Server class is not anymore an EventEmitter . Added a build task for fixing the coding standards issues. Added the onClose , onError , onListen and onRequest event streams to the Server class. Replaced JSDoc documentation generator by ESDoc . Replaced JSHint linter by ESLint . Updated the package dependencies.","title":"Version 1.0.0"},{"location":"about/changelog/#version-070","text":"Breaking change: renamed the Server.DEFAULT_HOST property to DEFAULT_ADDRESS . Breaking change: renamed the Server#host property to address . Breaking change: renamed the -H, --host command line option to -a, --address . Upgraded the package dependencies.","title":"Version 0.7.0"},{"location":"about/changelog/#version-060","text":"Breaking change: using more ES2015 features, like default parameters and destructuring assignment. Breaking change: raised the required Node.js version. Turned the package into a scoped one . Added the DEFAULT_HOST and DEFAULT_PORT constants to the Server class. Replaced SonarQube code analyzer by Codacy service.","title":"Version 0.6.0"},{"location":"about/changelog/#version-054","text":"Fixed some bugs. Upgraded the package dependencies.","title":"Version 0.5.4"},{"location":"about/changelog/#version-053","text":"Improved the way the server address is reported. The application instance is now exposed as global.app property.","title":"Version 0.5.3"},{"location":"about/changelog/#version-052","text":"Restored support for configuration files in JSON format. Upgraded the package dependencies.","title":"Version 0.5.2"},{"location":"about/changelog/#version-051","text":"The port parameter of the Server#listen method is now optional. Added unit tests. Added support for code coverage. Added support for Travis CI continuous integration.","title":"Version 0.5.1"},{"location":"about/changelog/#version-050","text":"Breaking change: using ES2015 features, like arrow functions, block-scoped binding constructs, classes and template strings. Breaking change: raised the required Node.js version. Breaking change: changed the whole API of Application class. Breaking change: changed the format of Server#request event. Breaking change: changed the format of configuration files to YAML . Added support for SonarQube code analyzer. Changed the documentation system for JSDoc . Changed licensing for the Apache License Version 2.0 .","title":"Version 0.5.0"},{"location":"about/changelog/#version-041","text":"Upgraded the package dependencies.","title":"Version 0.4.1"},{"location":"about/changelog/#version-040","text":"Breaking change: raised the required Node.js version. Removed the dependency on promise module. Upgraded the package dependencies.","title":"Version 0.4.0"},{"location":"about/changelog/#version-030","text":"Breaking change: ported the callback-based API to Promises . Using Gulp as build system. Fixed the issue #1 : using a Unix system for publishing the package on npm . Upgraded the package dependencies.","title":"Version 0.3.0"},{"location":"about/changelog/#version-021","text":"Added Application class, used in CLI script. Added sample configuration files. Updated the documentation.","title":"Version 0.2.1"},{"location":"about/changelog/#version-020","text":"The Server class and CLI now uses port 3000 as default. Added Server#listening event. Improved the event handling. Updated the package dependencies. Breaking change: removed Server#upgrade event. Using DocGen.js to generate the API reference.","title":"Version 0.2.0"},{"location":"about/changelog/#version-010","text":"Initial release.","title":"Version 0.1.0"},{"location":"about/license/","text":"MIT License Copyright 2014 - 2019 C\u00e9dric Belin Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"about/license/#mit-license","text":"Copyright 2014 - 2019 C\u00e9dric Belin Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"about/see_also/","text":"See also Development API reference npm package Nodejitsu HTTP Proxy Submit an issue Testing Continuous integration Code coverage","title":"See also"},{"location":"about/see_also/#see-also","text":"","title":"See also"},{"location":"about/see_also/#development","text":"API reference npm package Nodejitsu HTTP Proxy Submit an issue","title":"Development"},{"location":"about/see_also/#testing","text":"Continuous integration Code coverage","title":"Testing"},{"location":"usage/cli/","text":"Command line interface The Reverse-Proxy.js application provides a command line interface: reverse-proxy --help Usage: reverse-proxy [ options ] Personal reverse proxy server supporting WebSockets. Options: -v, --version output the version number -a, --address address address that the reverse proxy should run on ( default: 0 .0.0.0 ) -p, --port port port that the reverse proxy should run on ( default: 8080 ) -t, --target target location of the server the proxy will target -c, --config path location of the configuration file for the reverse proxy -u, --user user user to drop privileges to once server socket is bound --silent silence the log output from the reverse proxy -h, --help output usage information","title":"Command line interface"},{"location":"usage/cli/#command-line-interface","text":"The Reverse-Proxy.js application provides a command line interface: reverse-proxy --help Usage: reverse-proxy [ options ] Personal reverse proxy server supporting WebSockets. Options: -v, --version output the version number -a, --address address address that the reverse proxy should run on ( default: 0 .0.0.0 ) -p, --port port port that the reverse proxy should run on ( default: 8080 ) -t, --target target location of the server the proxy will target -c, --config path location of the configuration file for the reverse proxy -u, --user user user to drop privileges to once server socket is bound --silent silence the log output from the reverse proxy -h, --help output usage information","title":"Command line interface"},{"location":"usage/configuration/","text":"Configuration schema The defaults.json or defaults.yaml file, in the example folder of this package, lists all available settings and their default values. A target server can be expressed in two possible ways in the configuration file: - a string or a number representing an URI: 3000 (a port of the local host), \"domain.com:8080\" (an authority) or \"http://domain.com:8080\" (an origin). - an object with a uri property having the same format: {\"uri\": 3000} , {\"uri\": \"domain.com:8080\"} or {\"uri\": \"http://domain.com:8080\"} . Defaults JSON configuration { address : 0.0.0.0 , port : 8080 , routes : {}, target : null , proxy : { agent : null , autoRewrite : false , changeOrigin : false , forward : null , hostRewrite : false , ignorePath : false , prependPath : true , protocolRewrite : null , secure : true , ws : false , xfwd : false }, ssl : { ca : null , cert : null , ciphers : null , handshakeTimeout : 120000 , honorCipherOrder : false , key : null , passphrase : null , pfx : null , rejectUnauthorized : false , requestCert : false } } YAML configuration address : 0.0.0.0 port : 8080 routes : {} target : null proxy : agent : null autoRewrite : false changeOrigin : false forward : null hostRewrite : false ignorePath : false prependPath : true protocolRewrite : null secure : true ws : false xfwd : false ssl : ca : null cert : null ciphers : null handshakeTimeout : 120000 honorCipherOrder : false key : null passphrase : null pfx : null rejectUnauthorized : false requestCert : false","title":"Configuration"},{"location":"usage/configuration/#configuration-schema","text":"The defaults.json or defaults.yaml file, in the example folder of this package, lists all available settings and their default values. A target server can be expressed in two possible ways in the configuration file: - a string or a number representing an URI: 3000 (a port of the local host), \"domain.com:8080\" (an authority) or \"http://domain.com:8080\" (an origin). - an object with a uri property having the same format: {\"uri\": 3000} , {\"uri\": \"domain.com:8080\"} or {\"uri\": \"http://domain.com:8080\"} .","title":"Configuration schema"},{"location":"usage/configuration/#defaults","text":"","title":"Defaults"},{"location":"usage/configuration/#json-configuration","text":"{ address : 0.0.0.0 , port : 8080 , routes : {}, target : null , proxy : { agent : null , autoRewrite : false , changeOrigin : false , forward : null , hostRewrite : false , ignorePath : false , prependPath : true , protocolRewrite : null , secure : true , ws : false , xfwd : false }, ssl : { ca : null , cert : null , ciphers : null , handshakeTimeout : 120000 , honorCipherOrder : false , key : null , passphrase : null , pfx : null , rejectUnauthorized : false , requestCert : false } }","title":"JSON configuration"},{"location":"usage/configuration/#yaml-configuration","text":"address : 0.0.0.0 port : 8080 routes : {} target : null proxy : agent : null autoRewrite : false changeOrigin : false forward : null hostRewrite : false ignorePath : false prependPath : true protocolRewrite : null secure : true ws : false xfwd : false ssl : ca : null cert : null ciphers : null handshakeTimeout : 120000 honorCipherOrder : false key : null passphrase : null pfx : null rejectUnauthorized : false requestCert : false","title":"YAML configuration"},{"location":"usage/hostname_routing/","text":"Hostname routing Proxying requests using a routing table A routing table is a simple lookup table that maps incoming requests to proxy target locations. The mapping is based on the HTTP Host header . To use hostname routing, you need to provide a routes key in your configuration file , instead of a target key. The value of this key is an object where the keys are hostnames and the values are target locations. Tip Unhandled hostnames result in a 404 HTTP error. To override this behavior, use a wildcard character ( * ) as hostname to define the route matched by default when a hostname is not found. Example Enable the hostname routing, using the following mappings: the requests for domain.com are routed to the server at http://192.168.0.1:80 the requests for sub.domain.com are routed to the server at http://another.host:8080 all other requests are routed to the server at http://127.0.0.1:3000 JSON configuration { port : 8080 , routes : { domain.com : 192.168.0.1 , sub.domain.com : http://another.host:8080 , * : 3000 } } YAML configuration port : 8080 routes : domain.com : 192.168.0.1 sub.domain.com : http://another.host:8080 * : 3000","title":"Hostname routing"},{"location":"usage/hostname_routing/#hostname-routing","text":"","title":"Hostname routing"},{"location":"usage/hostname_routing/#proxying-requests-using-a-routing-table","text":"A routing table is a simple lookup table that maps incoming requests to proxy target locations. The mapping is based on the HTTP Host header . To use hostname routing, you need to provide a routes key in your configuration file , instead of a target key. The value of this key is an object where the keys are hostnames and the values are target locations. Tip Unhandled hostnames result in a 404 HTTP error. To override this behavior, use a wildcard character ( * ) as hostname to define the route matched by default when a hostname is not found.","title":"Proxying requests using a routing table"},{"location":"usage/hostname_routing/#example","text":"Enable the hostname routing, using the following mappings: the requests for domain.com are routed to the server at http://192.168.0.1:80 the requests for sub.domain.com are routed to the server at http://another.host:8080 all other requests are routed to the server at http://127.0.0.1:3000","title":"Example"},{"location":"usage/hostname_routing/#json-configuration","text":"{ port : 8080 , routes : { domain.com : 192.168.0.1 , sub.domain.com : http://another.host:8080 , * : 3000 } }","title":"JSON configuration"},{"location":"usage/hostname_routing/#yaml-configuration","text":"port : 8080 routes : domain.com : 192.168.0.1 sub.domain.com : http://another.host:8080 * : 3000","title":"YAML configuration"},{"location":"usage/http_headers/","text":"Custom HTTP headers It can sometimes be useful to add some HTTP headers to the requests sent to the target servers. Let's say that you have a remote service that needs basic authentication, but that you want to expose publicly. You could add an Authorization header to the proxied requests in order to let the remote service accept these requests. Adding HTTP headers to the proxied requests To add an header to all the proxied requests of a target, you must use the object notation for this target, and a headers property providing a map of the HTTP headers to set. Warning The HTTP headers defined in this way will replace any existing headers with the same name. Example Adding the Authorization and X-Custom-Header HTTP headers to the requests received on port 8080 and forwarded to http://127.0.0.1:3000 : JSON configuration { port : 8080 , target : { uri : 3000 , headers : { Authorization : Basic Z29vZHVzZXI6c2VjcmV0cGFzc3dvcmQ= , X-Custom-Header : X-Value } } } YAML configuration port : 8080 target : uri : 3000 headers : Authorization : Basic Z29vZHVzZXI6c2VjcmV0cGFzc3dvcmQ= X-Custom-Header : X-Value","title":"Custom HTTP headers"},{"location":"usage/http_headers/#custom-http-headers","text":"It can sometimes be useful to add some HTTP headers to the requests sent to the target servers. Let's say that you have a remote service that needs basic authentication, but that you want to expose publicly. You could add an Authorization header to the proxied requests in order to let the remote service accept these requests.","title":"Custom HTTP headers"},{"location":"usage/http_headers/#adding-http-headers-to-the-proxied-requests","text":"To add an header to all the proxied requests of a target, you must use the object notation for this target, and a headers property providing a map of the HTTP headers to set. Warning The HTTP headers defined in this way will replace any existing headers with the same name.","title":"Adding HTTP headers to the proxied requests"},{"location":"usage/http_headers/#example","text":"Adding the Authorization and X-Custom-Header HTTP headers to the requests received on port 8080 and forwarded to http://127.0.0.1:3000 :","title":"Example"},{"location":"usage/http_headers/#json-configuration","text":"{ port : 8080 , target : { uri : 3000 , headers : { Authorization : Basic Z29vZHVzZXI6c2VjcmV0cGFzc3dvcmQ= , X-Custom-Header : X-Value } } }","title":"JSON configuration"},{"location":"usage/http_headers/#yaml-configuration","text":"port : 8080 target : uri : 3000 headers : Authorization : Basic Z29vZHVzZXI6c2VjcmV0cGFzc3dvcmQ= X-Custom-Header : X-Value","title":"YAML configuration"},{"location":"usage/multiple_ports/","text":"Listening on multiple ports In order to listen on several ports, all you have to do is to use a JSON array or a YAML stream containing a different configuration object for each port to listen. Consequently, each port can have its own settings and routing table . Example A front server, supporting HTTPS and listening on ports 80 and 443 , forwarding requests to the server at http://127.0.0.1:3000 : JSON configuration [ { port : 80 , target : 3000 }, { port : 443 , target : 3000 , ssl : { cert : /path/to/ssl/cert.file , key : /path/to/ssl/key.file } } ] YAML configuration --- port : 80 target : 3000 --- port : 443 target : 3000 ssl : cert : /path/to/ssl/cert.file key : /path/to/ssl/key.file","title":"Listening on multiple ports"},{"location":"usage/multiple_ports/#listening-on-multiple-ports","text":"In order to listen on several ports, all you have to do is to use a JSON array or a YAML stream containing a different configuration object for each port to listen. Consequently, each port can have its own settings and routing table .","title":"Listening on multiple ports"},{"location":"usage/multiple_ports/#example","text":"A front server, supporting HTTPS and listening on ports 80 and 443 , forwarding requests to the server at http://127.0.0.1:3000 :","title":"Example"},{"location":"usage/multiple_ports/#json-configuration","text":"[ { port : 80 , target : 3000 }, { port : 443 , target : 3000 , ssl : { cert : /path/to/ssl/cert.file , key : /path/to/ssl/key.file } } ]","title":"JSON configuration"},{"location":"usage/multiple_ports/#yaml-configuration","text":"--- port : 80 target : 3000 --- port : 443 target : 3000 ssl : cert : /path/to/ssl/cert.file key : /path/to/ssl/key.file","title":"YAML configuration"},{"location":"usage/standalone_server/","text":"Setup a basic stand-alone proxy server From a command prompt: reverse-proxy --port = 8080 --target = 3000 # Reverse proxy instance listening on 0.0.0.0:8080 This will proxy all HTTP requests on port 80 on all network interfaces (i.e. 0.0.0.0 ) to port 3000 on the same host (i.e. 127.0.0.1 ). For a different target host: reverse-proxy --port = 80 --target = 192 .168.0.1:3000 reverse-proxy --port = 8080 --target = http://another.host:8080 --user = www-data You can also use a configuration file for the same task: reverse-proxy --config = path/to/config.yaml For more advanced usages, you always need to use configuration files . A target server can be expressed in two possible ways in the configuration file: - a string or a number representing an URI: 3000 (a port of the local host), \"domain.com:8080\" (an authority) or \"http://domain.com:8080\" (an origin). - an object with a uri property having the same format: {\"uri\": 3000} , {\"uri\": \"domain.com:8080\"} or {\"uri\": \"http://domain.com:8080\"} . Example JSON configuration { port : 80 , target : 3000 } YAML configuration # Basic stand-alone. port : 80 target : 3000","title":"Stand-alone proxy server"},{"location":"usage/standalone_server/#setup-a-basic-stand-alone-proxy-server","text":"From a command prompt: reverse-proxy --port = 8080 --target = 3000 # Reverse proxy instance listening on 0.0.0.0:8080 This will proxy all HTTP requests on port 80 on all network interfaces (i.e. 0.0.0.0 ) to port 3000 on the same host (i.e. 127.0.0.1 ). For a different target host: reverse-proxy --port = 80 --target = 192 .168.0.1:3000 reverse-proxy --port = 8080 --target = http://another.host:8080 --user = www-data You can also use a configuration file for the same task: reverse-proxy --config = path/to/config.yaml For more advanced usages, you always need to use configuration files . A target server can be expressed in two possible ways in the configuration file: - a string or a number representing an URI: 3000 (a port of the local host), \"domain.com:8080\" (an authority) or \"http://domain.com:8080\" (an origin). - an object with a uri property having the same format: {\"uri\": 3000} , {\"uri\": \"domain.com:8080\"} or {\"uri\": \"http://domain.com:8080\"} .","title":"Setup a basic stand-alone proxy server"},{"location":"usage/standalone_server/#example","text":"","title":"Example"},{"location":"usage/standalone_server/#json-configuration","text":"{ port : 80 , target : 3000 }","title":"JSON configuration"},{"location":"usage/standalone_server/#yaml-configuration","text":"# Basic stand-alone. port : 80 target : 3000","title":"YAML configuration"},{"location":"usage/using_https/","text":"Using HTTPS A common use-case for proxying in conjunction with HTTPS is that you have some front-facing HTTPS server, but all of your internal traffic is HTTP. In this way, you can reduce the number of servers to which your CA and other important security files are deployed and reduce the computational overhead from HTTPS traffic. If you want the proxy server to use HTTPS protocol, you need to provide a ssl key in your configuration file . The value of this key is an object that will be used as the first argument to https~createServer() function when instanciating the proxy server. Its structure is similar to the options parameter of tls~createServer() function. Info The ca , cert , key and pfx fields are specified as file paths: the corresponding files are loaded by the CLI script . Example Proxying HTTPS requests on port 443 to an HTTP server listening at http://127.0.0.1:3000 : JSON configuration { port : 443 , target : 3000 , ssl : { cert : /path/to/ssl/cert.file , key : /path/to/ssl/key.file } } YAML configuration port : 443 target : 3000 ssl : cert : /path/to/ssl/cert.file key : /path/to/ssl/key.file","title":"Using HTTPS"},{"location":"usage/using_https/#using-https","text":"A common use-case for proxying in conjunction with HTTPS is that you have some front-facing HTTPS server, but all of your internal traffic is HTTP. In this way, you can reduce the number of servers to which your CA and other important security files are deployed and reduce the computational overhead from HTTPS traffic. If you want the proxy server to use HTTPS protocol, you need to provide a ssl key in your configuration file . The value of this key is an object that will be used as the first argument to https~createServer() function when instanciating the proxy server. Its structure is similar to the options parameter of tls~createServer() function. Info The ca , cert , key and pfx fields are specified as file paths: the corresponding files are loaded by the CLI script .","title":"Using HTTPS"},{"location":"usage/using_https/#example","text":"Proxying HTTPS requests on port 443 to an HTTP server listening at http://127.0.0.1:3000 :","title":"Example"},{"location":"usage/using_https/#json-configuration","text":"{ port : 443 , target : 3000 , ssl : { cert : /path/to/ssl/cert.file , key : /path/to/ssl/key.file } }","title":"JSON configuration"},{"location":"usage/using_https/#yaml-configuration","text":"port : 443 target : 3000 ssl : cert : /path/to/ssl/cert.file key : /path/to/ssl/key.file","title":"YAML configuration"}]}